name: Deploy car to Amazon ECS #工作流的名称，可自定义


on:
  push:
    tags: [ test-car-202* ] #更新为自己的tags

env:
  #开发变量
  ENV: test                          #发布的环境
  BUSINESS_GROUP: wtp             #需修改业务组名称，govee对外，igovee对内
  MAVEN_MODEL: "org.example:car"  #AVA编译参数-maven groupId:artifactId
  PROJECT_DIR: car              #JAVA项目名称
  ECR_REPOSITORY: car       #需修改镜像仓库名称
  LB_NAME: car-alb              #需要更新为LB名称
  CLUSTER_NAME: wtp       #需修改ecs集群名称
  SERVICE_NAME: test-car-service     #需修改服务名称
  SEVICE_PORT: 9999                 #需修改服务端口
  DOMAIN_NAME: test-car.api.govee.com    #需修改域名
  START_COMMAND: "java -jar app.jar --spring.profiles.active=test"  #需修改启动命令
  DESIREDCOUNT: 4 #服务启动的容器数，dev/test/pda/pre默认1个，pro默认2个，生产超过默认值自定义

  #运维变量
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} #新的代码仓库（没有使用流水线发布），通知管理员添加
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} #新的代码仓库（没有使用流水线发布），通知管理员添加
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} #新的代码仓库（没有使用流水线发布），通知管理员添加
#  DINGDING_TOKEN: ${{ secrets.DINGDING_TOKEN }} #新的代码仓库（没有使用流水线发布），通知管理员添加
  AWS_DEFAULT_REGION: us-east-1 #默认

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy sku #任务的名称，可自定义
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: manve Compile code
        run: |
          mvn clean install -DskipTests -pl ${{ env.MAVEN_MODEL }} -am #需修改编译

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Create ECR Repository
        run: "bash deploy.sh create_ecr_repository"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.ENV }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd ${{ env.PROJECT_DIR }}
          docker build -t $ECR_REGISTRY/$BUSINESS_GROUP/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$BUSINESS_GROUP/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$BUSINESS_GROUP/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Create ECS fargate task
        run: "bash deploy.sh create_ecs_fargate_task"

      - name: Conf ALB
        run: "bash deploy.sh conf_alb"

      - name: Create ecs fargate service
        run: "bash deploy.sh create_ecs_fargate_service"

      - name: Conf route53
        run: "bash deploy.sh conf_dns_alb"

      - name: Update Service
        run: "bash deploy.sh update_service"

#      - name: send dingding info
#        run: "bash deploy.sh send_dingding"
